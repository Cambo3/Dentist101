import java.util.Scanner;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintWriter;

public class DentistPractice {
	static final Scanner Menu = new Scanner(System.in);
	 private static Scanner input = new Scanner(System.in);
	 private static final Appointment[] appointments = new Appointment[18];
	 

	public static void main(String[] args) throws Exception {
		//loadData();

		String choice = "";

		System.out.println("-- Welcome to the Dentists --");


		System.out.println();

		do {
			System.out.println("1 - Admin");
			System.out.println("2 - Dentist");
			System.out.println("3 - Patient");
			System.out.println("Q - Quit");
			System.out.print("Pick : ");

			choice = Menu.next().toUpperCase();

			switch (choice) {
				case "1" : {
					Admin();
					break;
				}
				case "2" : {
					Dentist();
					break;
				}
				case "3" : {
					Patient();
					break;
				}
				case "4" : {

					break;
				}
			}
		} while (!choice.equals("Q"));

}

	private static void Patient() throws FileNotFoundException {
		Scanner patients = new Scanner(System.in);
		
		for(int i=0; i<3; i++) {
		
			System.out.println("Please input username");
			String usernameP = patients.next();
			System.out.println("Please input password");
			String passwordP = patients.next();
			
			if (usernameP.equals("Patient")&&passwordP.equals("password")) {
				patientSubMenu();
				
			}
			else { System.out.println("Your username or password is incorrect, please try again");
			
			}
			System.out.println("Tries exceeded, Returning to menu.");
		
	}}
	
	private static void Dentist() throws FileNotFoundException {
		Scanner dentist = new Scanner(System.in);
		
		for(int i=0; i<3; i++) {
		
			System.out.println("Please input Name");
			String usernameD = dentist.next();
			System.out.println("Please input password");
			String passwordD = dentist.next();
			
			if (usernameD.equals("Dentist")&&passwordD.equals("password")) {
				dentistSubMenu();
				
			}
			else { System.out.println("Your username or password is incorrect, please try again");
			
			}
			System.out.println("Tries exceeded, Returning to menu.");
		}}
	
	private static void Admin() throws FileNotFoundException {
		Scanner admin = new Scanner(System.in);
		
		for(int i=0; i<3; i++) {
		
			System.out.println("Please input username");
			String usernameA = admin.next();
			System.out.println("Please input password");
			String passwordA = admin.next();
			
			if (usernameA.equals("Admin")&&passwordA.equals("password")) {
				adminSubMenu();
				break;
				
			}
			else { System.out.println("Your username or password is incorrect, please try again");
			
			}
		}
			System.out.println("Tries exceeded, Returning to menu.");
			
		
	}
	
	
	private static void patientSubMenu() throws FileNotFoundException {
		
		 final Scanner P = new Scanner(System.in);
		 
		 String patientChoice = "";
	
		do {
			System.out.println("1 - Add/change your personal details");
			System.out.println("2 - Previous visits to the practice");
			System.out.println("3 - Previous treatments received");
			System.out.println("4 - Request an appointment");
			System.out.println("5 - Do you allow your practice admin to view your treatment list (Y/N)");
			System.out.println("Q - Quit");
			System.out.print("Pick : ");

			patientChoice = P.next().toUpperCase();

			switch (patientChoice) {
				case "1" : {
					PersonalDetails();
					break;
				}
				case "2" : {
					PreviousVists();
					break;
				}
				case "3" : {
					PreviousTreatments();
					break;
				}
				case "4" : {
					requestAppointment();
					break;
				}
				case "5" : {
					Privacy();
					break;
				}
				case "6" : {

					break;
				}
			}
		} while (!patientChoice.equals("Q"));

		
		
	}
	
	private static void dentistSubMenu() throws FileNotFoundException {
		final Scanner D = new Scanner(System.in);
		
		String choice = "";
		
		do {
			System.out.println("1 - Add/change personal details");
			System.out.println("2 - View calendar");
			System.out.println("3 - List previous appointments");
			System.out.println("4 - Add treatment to a patient");
			System.out.println("Q - Quit");
			System.out.print("Pick : ");

			choice = D.next().toUpperCase();

			switch (choice) {
				case "1" : {
					AddremoveDetailsDentist();
					break;
				}
				case "2" : {
					displayAppointment();
					break;
				}
				case "3" : {
					listPreviousAppointments();
					break;
				}
				case "4" : {
					addTreatmentToPatient();
					break;
				}

			}
		} while (!choice.equals("Q"));
		
	}
	
	

	private static void AddremoveDetailsDentist() {
		// TODO Auto-generated method stub
		
	}

	private static void adminSubMenu() throws FileNotFoundException {

		final Scanner A = new Scanner(System.in);
		
		String choice = "";
		
		do {
			System.out.println("1 - Add/remove dentist");
			System.out.println("2 - Add/remove patient");
			System.out.println("3 - Add/change first choice dentist");
			System.out.println("4 - Alter working days");
			System.out.println("5 - List upcoming appointments");
			System.out.println("6 - List previous visits made");
			System.out.println("7 - List treatments made");
			System.out.println("Q - Quit");
			System.out.print("Pick : ");

			choice = A.next().toUpperCase();

			switch (choice) {
				case "1" : {
					AddremoveDentist();
					break;
				}
				case "2" : {
					AddremovePatient();
					break;
				}
				case "3" : {
					AddremoveFirstChoice();
					break;
				}
				case "4" : {
					AlterDays();
					break;
				}
				case "5" : {
					displayAppointment();
					break;
				}
				case "6" : {
					ListPreviousVisits();
					break;
				}
				case "7" : {
					ListTreatments();
					break;
				}
			}
		} while (!choice.equals("Q"));
		
	}
	
		
public static void AddremovePatient() throws FileNotFoundException {
		
		final Scanner answer = new Scanner(System.in);
		Scanner PatientDetails = new Scanner(new FileReader("C:\\Dentist\\PatientDetails.txt"));
		final PatientDetailsA[] PatientDetailsArray = new PatientDetailsA[5];
		
		int amount = 0;
		
		while(PatientDetails.hasNext()) {
			
			String patientID = PatientDetails.next();
			String firstName = PatientDetails.next();
			String lastName = PatientDetails.next();
			String password = PatientDetails.next();
			String address = PatientDetails.next();
			String firstDentist = PatientDetails.next();
			
			PatientDetailsArray[amount] = new PatientDetailsA(patientID, firstName, lastName, password, address, firstDentist);
			amount++;
			
		}
		
		String addPatient = "0";
		String addFirstName = "free";
		String addLastName = "free";
		String addPassword = "free";
		String addAddress = "free";
		
		System.out.println("Would you like to add or remove a patient?");
		System.out.println("1 - Add");
		System.out.println("2 - Remove");
		
		addPatient = answer.next().toUpperCase();
		
		if (addPatient.equals("1")) {
			
			String empty = "free";
			
			System.out.println("Please remember to use the '_' instead of spaces, thank you.");
			System.out.println(" ");
			
			System.out.println("Please enter first name:");
			addFirstName = answer.next();
			
			System.out.println("Please enter last name:");
			addLastName = answer.next();
			
			System.out.println("Please enter new password name:");
			addPassword = answer.next();
			
			System.out.println("Please enter address:");
			addAddress = answer.next();
			
			for (int i = 0; i<PatientDetailsArray.length; i++)
			{
			
				if ((PatientDetailsArray[i].getFirstName().equals(empty))&&(PatientDetailsArray[i].getLastName().equals(empty))&&(PatientDetailsArray[i].getPassword().equals(empty))&&(PatientDetailsArray[i].getAddress().equals(empty))&&(PatientDetailsArray[i].getFirstDentist().equals(empty)))
				{
					// System.out.println(PatientDetailsArray[i].toString());
					PatientDetailsArray[i].addFirstName(addFirstName);
					PatientDetailsArray[i].addLastName(addLastName);
					PatientDetailsArray[i].addPassword(addPassword);
					PatientDetailsArray[i].addAddress(addAddress);
					
					break;
				}
			
			}
			
			
			
		}
		
		
		else {
		
		
		
		System.out.println("Please enter you first name:");
		String firstNameRemove = input.nextLine();
		
		System.out.println("Please enter you last name:");
		String lastNameRemove = input.nextLine();
		
		System.out.println("Please enter you password:");
		String passwordRemove = input.nextLine();
		
		String remove = "free";
		
		for (int i = 0; i<PatientDetailsArray.length; i++)
		{
			if ((PatientDetailsArray[i].getFirstName().equals(firstNameRemove))&&(PatientDetailsArray[i].getLastName().equals(lastNameRemove))&&(PatientDetailsArray[i].getPassword().equals(passwordRemove)))
			{
				// System.out.println(PatientDetailsArray[i].toString());
				PatientDetailsArray[i].removeFirstName(remove);
				PatientDetailsArray[i].removeLastName(remove);
				PatientDetailsArray[i].removePassword(remove);
				PatientDetailsArray[i].removeAddress(remove);
				PatientDetailsArray[i].removeFirstDentist(remove);
				break;
			}
		}
		}
		
		PrintWriter save = new PrintWriter("C:\\Dentist\\PatientDetails.txt");

		for (int i=0; i<PatientDetailsArray.length ; i++)
		  {
		     save.println(PatientDetailsArray[i].save());
		  }
		save.close();
		
		System.out.println("Data Saved.");
		
	}

	private static void AddremoveFirstChoice() {
		// TODO Auto-generated method stub
		
	}

	private static void AlterDays() {
		// TODO Auto-generated method stub
		
	}

	//private static void ListAppointments() {
		// TODO Auto-generated method stub
		
	//}

	private static void ListPreviousVisits() {
		// TODO Auto-generated method stub
		
	}

	private static void ListTreatments() {
		// TODO Auto-generated method stub
		
	}

	private static void AddremoveDentist() {
		// TODO Auto-generated method stub
		
	}


	private static void listPreviousAppointments() {
		// TODO Auto-generated method stub
		
	}

	private static void addTreatmentToPatient() {
		// TODO Auto-generated method stub
		
	}
	
	private static void PersonalDetails() {
		// TODO Auto-generated method stub
		
	}
	private static void PreviousVists() {
		// TODO Auto-generated method stub
		
	}
	private static void PreviousTreatments() {
		// TODO Auto-generated method stub
		
	}
	
	private static void Privacy() {
		// TODO Auto-generated method stub
		
	}
	private static void loadAppointments() throws FileNotFoundException {
		
		Scanner file = new Scanner(new FileReader("D://Appointments.txt"));
		int index = 0;
		
			while (file.hasNext()) {
			String Weekday = file.next();
			String TimeOfAppointment = file.next();
			String Dentist = file.next();
			String TypeOfAilment = file.next();
			String ID = file.next();
			
			
			
			appointments[index] = new Appointment(Weekday, TimeOfAppointment, Dentist, TypeOfAilment, ID);
			index++;
		}
			
		file.close();
}
	
	private static void displayAppointment() throws FileNotFoundException {
		System.out.println("\n--Available Appointments --");
		
		loadAppointments();
		
		System.out.println("");
		
		for (int i=0; i<appointments.length; i++) { 
			System.out.println(appointments[i].toString());
		
		}
		System.out.println("");
	}
	
	private static void requestAppointment() throws FileNotFoundException {
		String Weekday = "";
		String TimeOfAppointment = "";
		String Dentist = "";
		String SelectedAilment = "";
		String SelectedID = "free";

		loadAppointments();

	System.out.println("Whom whould you like your appointment with? [DrJosh / DrJames / DrPaul]");
	String ChoiceOfDentist = input.next();
	if (ChoiceOfDentist.equals("DrJosh")) {
		Dentist = "DrJosh";
	System.out.println("DrJosh's working hours are: Monday/Tuesday");
	}
	else if (ChoiceOfDentist.equals("DrJames")) {
		Dentist = "DrJames";
	System.out.println("DrJames' working hours are: Wednesday/Thursday");
	}
	else if (ChoiceOfDentist.equals("DrPaul")) {
		Dentist = "DrPaul";
	System.out.println("DrPauls's working hours are: Friday/Saturday");	
		}
	
	System.out.println("What is the purpose of this appointment? ");
	System.out.println("Type 1 for 'Toothache'");
	System.out.println("Type 2 for 'Accident'");
	System.out.println("Type 3 for 'Bleeding'");
	System.out.println("Type 4 for 'Over-Sensitive'");
	System.out.println("Type 5 for 'Other'");
	{
	SelectedAilment = input.next().toUpperCase();
	
	if (SelectedAilment.equals("1")) {
		SelectedAilment = "Toothache";
		}
	else if (SelectedAilment.equals("2")) {
		SelectedAilment = "Accident";
		}
	else if (SelectedAilment.equals("3")) {
		SelectedAilment = "Bleeding";
		}
	else if (SelectedAilment.equals("4")) {
		SelectedAilment = "Over-Sensitive";
		}
	else if (SelectedAilment.equals("5")) {
		SelectedAilment = "Other";
		}
	System.out.println("\nIf you are happy with your choices:");
	System.out.println("please enter your ID below:");
	
	SelectedID = input.next();
	
	System.out.println("\nThe appointment below matches/or is the best match based on your choices :");
	
	for (int i=0; i<appointments.length; i++) { 
		
		if ((appointments[i].getDentist().equals(Dentist))&&(appointments[i].getTypeOfAilment().equals("free")&&(appointments[i].getID().equals("free"))))
			
		{
			
			System.out.println(appointments[i].toString());
		    appointments[i].order(SelectedAilment,SelectedID);
		     break;
		}
		
	}}}
	
	
private static void cancelAppointment() {
		
		System.out.println("What was the purpose of the appointment?");
		System.out.println("\nType 1 for 'Toothache'");
		System.out.println("Type 2 for 'Accident'");
		System.out.println("Type 3 for 'Bleeding'");
		System.out.println("Type 4 for 'Over-Sensitive'");
		System.out.println("Type 5 for 'Other'");
		String cancelAilment = input.next();
		
		if (cancelAilment.equals("1")) {
			cancelAilment = "Toothache";
			}
		else if (cancelAilment.equals("2")) {
			cancelAilment = "Accident";
			}
		else if (cancelAilment.equals("3")) {
			cancelAilment = "Bleeding";
			}
		else if (cancelAilment.equals("4")) {
			cancelAilment = "Over-Sensitive";
			}
		else if (cancelAilment.equals("5")) {
			cancelAilment = "Other";
			}
		
		System.out.println("\nEnter your Unique ID:");
		String cancelID = input.next();
		
		String cancel = "free";
	
		for (int i=0; i<appointments.length; i++) 
		{ 
			
			if ((appointments[i].getTypeOfAilment().equals(cancelAilment))&&(appointments[i].getID().equals(cancelID))) {
				
				System.out.println(appointments[i].toString());
			     appointments[i].cancel(cancel, cancel);
			     
			    System.out.println("\nThe above appointment has been successfully cancelled");
	
	}}}
public static void saveUponExit() throws FileNotFoundException{
	
	
	PrintWriter saveAppointmentData = new PrintWriter("D://Appointments.txt");    

    for (int i=0; i<appointments.length ; i++)
    {
    	
        saveAppointmentData.println(appointments[i]);
        
    }
    saveAppointmentData.close();
	
	
}

}
